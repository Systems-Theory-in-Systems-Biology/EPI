name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

  tests:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # - windows-latest Reason: get it running on ubuntu-latest first
          # - macOS-latest   Reason: get it running on ubuntu-latest first
        python-version: ["3.10",]
        poetry-version: ["1.2.2",]
    name: Run tests
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          #version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Verify poetry installation
        run: poetry --version
      # - name: Load cached venv
      #   id: cached-pip-wheels
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache
      #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # - name: Install dependencies
      #   run: poetry install --no-interaction --no-root --with=dev
      - name: Install library
        run: poetry install --no-interaction
      - name: Prepare cpp test
        run: |
          sudo apt install -y cmake
          sudo apt install -y libeigen3-dev
          sudo ln -s /usr/include/eigen3/Eigen /usr/include/Eigen
          sudo apt install -y pybind11-dev
          source $VENV
          cd epi/examples/cpp
          mkdir build
          cd build
          cmake ..
          make -j
      - name: Run pytest
        run: |
          source $VENV
          pytest -v
      - name: Run coverage
        run: |
          source $VENV
          coverage run -m pytest -v
          coverage report
